diff --git a/floppy/Makefile b/floppy/Makefile
index 3d53855..7089b58 100644
--- a/floppy/Makefile
+++ b/floppy/Makefile
@@ -1,8 +1,14 @@
-all: test
+all: test1 test2 test3
 
-test: test.c
-	gcc -static -o test test.c
+test1: test1.c
+	gcc -static -o test1 test1.c
+
+test2: test2.c
+	gcc -static -o test2 test2.c
+
+test3: test3.c
+	gcc -static -o test3 test3.c
 
 clean:
-	rm -f test
+	rm -f test1 test2 test3
 
diff --git a/floppy/test.c b/floppy/test.c
deleted file mode 100644
index 39c8a5c..0000000
--- a/floppy/test.c
+++ /dev/null
@@ -1,30 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-
-#include <linux/unistd.h>
-#include <sys/syscall.h>
-
-/*
- * Function: main()
- *
- * Description:
- *   Entry point for this program.
- *
- * Inputs:
- *   argc - The number of argument with which this program was executed.
- *   argv - Array of pointers to strings containing the command-line arguments. 
- *
- * Return value:
- *   0 - This program terminated normally.
- */
-int
-main (int argc, char ** argv) {
-	/* Print a friendly message */
-	printf ("Hello from User Space!\n");
-
-	/* Call our new system call */
-	syscall (181, NULL);
-
-	/* Exit the program */
-	return 0;
-}
diff --git a/floppy/test1 b/floppy/test1
new file mode 100755
index 0000000..30f725b
Binary files /dev/null and b/floppy/test1 differ
diff --git a/floppy/test1.c b/floppy/test1.c
new file mode 100644
index 0000000..86101aa
--- /dev/null
+++ b/floppy/test1.c
@@ -0,0 +1,26 @@
+//
+//  test1.c
+//  
+//
+//  Created by Harry Su on 11/26/16.
+//
+//
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/syscall.h>
+
+/* reads the page table entry for virtual address zero */
+int main(int argc, char *argv[]){
+    unsigned long pte = 0;
+    if(syscall(181,0,&pte)){
+        printf("readMMU error\n");
+    }
+    if(syscall(182,0,pte)){
+        printf("writeMMU error\n");
+        return -1;
+    }
+    printf("pte : %lx\n",pte);
+    return 0;
+}
diff --git a/floppy/test2 b/floppy/test2
new file mode 100755
index 0000000..5df4c20
Binary files /dev/null and b/floppy/test2 differ
diff --git a/floppy/test2.c b/floppy/test2.c
new file mode 100644
index 0000000..429690c
--- /dev/null
+++ b/floppy/test2.c
@@ -0,0 +1,69 @@
+//
+//  test2.c
+//  
+//
+//  Created by Harry Su on 11/26/16.
+//
+//
+/*
+ *uses mmap() to map a file into memory and then calls readMMU() to find the page table entry for the virtual
+ *address to which the file is mapped.
+ */
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/syscall.h>
+
+int main(int argc, char *argv[]){
+    struct stat sb;
+    int fd;
+    unsigned long *vaddr;
+    unsigned long pte = 0;
+    
+    if(argc != 2){
+        fprintf(stderr, "Usage: %s <pathname>\n",argv[0]);
+        exit(EXIT_FAILURE);
+    }
+    
+    fd = open(argv[1],O_RDWR);
+    if(fd==-1){
+        perror("open");
+        exit(EXIT_FAILURE);
+    }
+    
+    /* To obtain file size */
+    if(fstat(fd,&sb)){
+        perror("fstat");
+        exit(EXIT_FAILURE);
+    }
+    /*creates a new mapping in the virtual address space */
+    vaddr = mmap(NULL,sb.st_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);
+    if(vaddr==MAP_FAILED){
+        perror("mmap");
+        exit(EXIT_FAILURE);
+    }
+    
+    printf("Call readMMU after mmap:\n");
+    
+    if (syscall(181, vaddr, &pte)) {
+        printf("readMMU error\n");
+    }
+    printf("pte : 0x%lx\n",pte);
+    /* try to access the mapped file */
+    unsigned long access = *vaddr;
+    printf("Call readMMU after access it:\n");
+    
+    if (syscall(181, vaddr, &pte)) {
+        printf("readMMU error\n");
+        return -1;
+    }
+    printf("pte = 0x%lx\n", pte);
+    
+    return 0;
+}
+
+
diff --git a/floppy/test3 b/floppy/test3
new file mode 100755
index 0000000..8183883
Binary files /dev/null and b/floppy/test3 differ
diff --git a/floppy/test3.c b/floppy/test3.c
new file mode 100644
index 0000000..f508f81
--- /dev/null
+++ b/floppy/test3.c
@@ -0,0 +1,109 @@
+//
+//  test3.c
+//  
+//
+//  Created by Harry Su on 11/27/16.
+//
+//
+
+/*
+ *uses mmap() to map two different files into two different virtual addresses; call these virtual addresses A
+ *and B. This program should then use readMMU() and writeMMU() to map the physical page mapped to virtual 
+ *address A to virtual address B.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/syscall.h>
+
+int main(int argc, char *argv[]){
+    struct stat sbA,sbB;
+    int fdA,fdB;
+    unsigned long *vaddrA, *vaddrB;
+    unsigned long pteA = 0, pteB = 0;
+    
+    if(argc != 3){
+        fprintf(stderr, "Usage: %s <pathname><pathname>\n",argv[0]);
+        exit(EXIT_FAILURE);
+    }
+    /*open file A*/
+    fdA = open(argv[1],O_RDWR);
+    if(fdA==-1){
+        perror("open");
+        exit(EXIT_FAILURE);
+    }
+    
+    /* To obtain file size */
+    if(fstat(fdA,&sbA)){
+        perror("fstat");
+        exit(EXIT_FAILURE);
+    }
+    /*creates a new mapping in the virtual address space */
+    vaddrA = mmap(NULL,sbA.st_size,PROT_READ|PROT_WRITE,MAP_SHARED,fdA,0);
+    if(vaddrA==MAP_FAILED){
+        perror("mmap");
+        exit(EXIT_FAILURE);
+    }
+    
+    /*open file B*/
+    fdB = open(argv[2],O_RDWR);
+    if(fdB==-1){
+        perror("open");
+        exit(EXIT_FAILURE);
+    }
+    /* To obtain file size */
+    if(fstat(fdB,&sbB)){
+        perror("fstat");
+        exit(EXIT_FAILURE);
+    }
+    /*creates a new mapping in the virtual address space */
+    vaddrB = mmap(NULL,sbB.st_size,PROT_READ|PROT_WRITE,MAP_SHARED,fdB,0);
+    if(vaddrB==MAP_FAILED){
+        perror("mmap");
+        exit(EXIT_FAILURE);
+    }
+    
+    /*try to read the mapped file*/
+    printf("vaddrA: %lu\n",*vaddrA);
+    printf("vaddrB: %lu\n",*vaddrB);
+    
+    
+    
+    if (syscall(181, vaddrA, &pteA)) {
+        printf("readMMU error\n");
+        return -1;
+    }
+    
+    if (syscall(181, vaddrB, &pteB)) {
+        printf("readMMU error\n");
+        return -1;
+    }
+    
+    
+    /* map the physical page mapped to virtual address A to virtual address B */
+    if (syscall(182, vaddrB, pteA)) {
+        printf("writeMMU error\n");
+        return -1;
+    }
+    printf("virtual address B has been changed\n");
+    
+    /* write into virtual address A*/
+    *vaddrA = 3;
+    /* check if the same value written into virtual address B*/
+    printf("vaddrA: %lu\n",*vaddrA);
+    printf("vaddrB: %lu\n",*vaddrB);
+    
+    /* restore the pte of file B */
+    if (syscall(182, vaddrB, pteB)) {
+        printf("writeMMU error\n");
+        return -1;
+    }
+    
+    return 0;
+    
+}
diff --git a/linux-3.18.42/arch/x86/syscalls/syscall_64.tbl b/linux-3.18.42/arch/x86/syscalls/syscall_64.tbl
index 281150b..7d95d18 100644
--- a/linux-3.18.42/arch/x86/syscalls/syscall_64.tbl
+++ b/linux-3.18.42/arch/x86/syscalls/syscall_64.tbl
@@ -187,8 +187,10 @@
 178	64	query_module
 179	common	quotactl		sys_quotactl
 180	64	nfsservctl
-181	common	getpmsg
-182	common	putpmsg
+#181	common	getpmsg
+181	common	readMMU			sys_readMMU
+#182	common	putpmsg
+182	common	writeMMU		sys_writeMMU
 183	common	afs_syscall
 184	common	tuxcall
 185	common	security
diff --git a/linux-3.18.42/kernel/MMU.c b/linux-3.18.42/kernel/MMU.c
new file mode 100644
index 0000000..3988402
--- /dev/null
+++ b/linux-3.18.42/kernel/MMU.c
@@ -0,0 +1,251 @@
+//
+//  MMU.c
+//  
+//
+//  Created by Harry Su on 11/25/16.
+//
+//
+
+#include <linux/syscalls.h>
+#include <linux/types.h>
+#include <asm/page.h>
+#include <asm/linkage.h>
+#include <asm/tlbflush.h>
+#include <asm/uaccess.h>
+
+
+/*
+ * Function: get_pagetable()
+ *
+ * Description:
+ *  Return a physical address that can be used to access the current page table.
+ */
+static inline unsigned char *
+get_pagetable (void) {
+    /* Value of the CR3 register */
+    uintptr_t cr3;
+    
+    /* Get the page table value out of CR3 */
+    __asm__ __volatile__ ("movq %%cr3, %0\n" : "=r" (cr3));
+    
+    /*
+     * Shift the value over 12 bits.  The lower-order 12 bits of the page table
+     * pointer are assumed to be zero, and so they are reserved or used by the
+     * hardware.
+     */
+    return (unsigned char *)((((uintptr_t)cr3) & 0x000ffffffffff000u));
+}
+
+/*
+ * Function: readPML4E(unsigned long vaddr, unsigned char *cr3)
+ *
+ * Description:
+ *  Return Page Map Level 4
+ */
+unsigned long* readPML4E(unsigned long vaddr, unsigned char *cr3){
+    /* linear address 47:39 */
+    unsigned long pml4 = vaddr&0x0000ff8000000000u;
+    /* physical address of pmle4
+     * Bits 51:12 are from CR3
+     * Bits 11:3 are bits 47:39 of the linear address
+     * Bits 2:0 are all 0
+     */
+    return (unsigned long *)((pml4>>36)|(uintptr_t)cr3);
+}
+
+/*
+ * Function: readPDPTE(unsigned long vaddr, unsigned long pml4e)
+ *
+ * Description:
+ *  Return Page Directory Pointer Table
+ */
+unsigned long* readPDPTE(unsigned long vaddr, unsigned long pml4e){
+    /* physical address of pdpte
+     * Bits 51:12 are from the PMLE4
+     * Bits 11:3 are bits 38:30 of the linear address
+     * Bits 2:0 are all 0
+     */
+    return (unsigned long *)(((vaddr&0x0000007fc0000000u)>>27) | (pml4e&0x000ffffffffff000u));
+}
+
+/*
+ * Function: readPDE(unsigned long vaddr, unsigned long pdpte)
+ *
+ * Description:
+ *  Return Page Directory
+ */
+unsigned long* readPDE(unsigned long vaddr, unsigned long pdpte){
+    /* physical address of pde
+     * Bits 51:12 are from the PDPTE
+     * Bits 11:3 are bits 29:21 of the linear address
+     * Bits 2:0 are all 0
+     */
+    return (unsigned long *)(((vaddr&0x000000003fe00000u)>>18) | (pdpte&0x000ffffffffff000u));
+}
+
+/*
+ * Function: readPTE(unsigned long vaddr, unsigned long pde)
+ *
+ * Description:
+ *  Return Page Table
+ */
+unsigned long* readPTE(unsigned long vaddr, unsigned long pde){
+    /* physical address of pte
+     * Bits 51:12 are from the PDE
+     * Bits 11:3 are bits 20:12 of the linear address
+     * Bits 2:0 are all 0
+     */
+    return (unsigned long *)(((vaddr&0x00000000001ff000u)>>9) | (pde&0x000ffffffffff000u));
+}
+
+/*
+ * Function: sys_readMMU(unsigned long vaddr, unsigned long* pte_u)
+ *
+ * Description:
+ *  Store the value of the page table entry for virtual address vaddr into the memory pointed to by pte. 
+ *  The system call should return 0 on success and -1 on error.
+ */
+asmlinkage long sys_readMMU(unsigned long vaddr, unsigned long* pte_u){
+    
+    unsigned char *cr3 = get_pagetable();
+    unsigned long *_pml4e,*_pdpte, *_pde, *_pte;
+    unsigned long pml4e, pdpte, pde, pte;
+    
+    _pml4e = readPML4E(vaddr,cr3);
+    /* pml4 entries */
+    pml4e = *((unsigned long *)(__va(_pml4e)));
+    
+    if((pml4e&0x0000000000000001u) == 0x0000000000000000u){
+        printk("pml4e not present\n");
+        return -1;
+    }
+    
+    
+    _pdpte = readPDPTE(vaddr,pml4e);
+     /* pdpt entries */
+    pdpte = *((unsigned long *)(__va(_pdpte)));
+    
+
+    /* check PDPTE present bit */
+    if((pdpte&0x0000000000000001u)==0x0000000000000000u){
+        printk("pdpte not present\n");
+        return -1;
+    }
+    
+     /* check PDPTE's PS flag(bit 7) */
+    if((pdpte&0x0000000000000080u)==0x0000000000000080u){
+        if(copy_to_user(pte_u,&pdpte,sizeof(unsigned long))){
+            printk("copy_to_user error\n");
+            return -1;
+        }
+        return 0;
+    }
+    
+    
+    /* pd entries */
+    _pde = readPDE(vaddr,pdpte);
+    pde = *((unsigned long *)(__va(_pde)));
+    /* check PDE present bit */
+    if((pde&0x0000000000000001u)==0x0000000000000000u){
+        printk("pde not present\n");
+        return -1;
+    }
+    
+    /* check PDE's PS flag(bit 7) */
+    if((pde&0x0000000000000080u)==0x0000000000000080u){
+        if(copy_to_user(pte_u,&pde,sizeof(unsigned long))){
+            printk("copy_to_user error\n");
+            return -1;
+        }
+        return 0;
+    }
+    
+
+    
+    /* pt entries */
+    _pte = readPTE(vaddr,pde);
+    pte = *((unsigned long *)(__va(_pte)));
+    
+    /* check PTE present bit */
+    if((pte&0x0000000000000001u)==0x0000000000000000u){
+        printk("pte not present\n");
+        return -1;
+    }
+    
+    if(copy_to_user(pte_u,&pte,sizeof(unsigned long))){
+        printk("copy_to_user error\n");
+        return -1;
+    }
+    
+    return 0;
+    
+}
+/*
+ * Function: sys_writeMMU(unsigned long vaddr, unsigned long pte_u)
+ *
+ * Description:
+ *  Store the value of the page table entry value pte into the page table entry for virtual address vaddr. 
+ *  The system call should return 0 on success and -1 on error.
+ */
+asmlinkage long sys_writeMMU(unsigned long vaddr, unsigned long pte_u){
+    
+    unsigned char *cr3 = get_pagetable();
+    unsigned long *_pml4e,*_pdpte, *_pde, *_pte;
+    unsigned long pml4e, pdpte, pde, pte;
+    
+    _pml4e = readPML4E(vaddr,cr3);
+    /* pml4 entries */
+    pml4e = *((unsigned long *)(__va(_pml4e)));
+    
+    if((pml4e&0x0000000000000001u) == 0x0000000000000000u){
+        printk("pml4e not present\n");
+        return -1;
+    }
+    
+    _pdpte = readPDPTE(vaddr,pml4e);
+    /* pdpt entries */
+    pdpte = *((unsigned long *)(__va(_pdpte)));
+    
+    /* check PDPTE present bit */
+    if((pdpte&0x0000000000000001u)==0x0000000000000000u){
+        printk("pdpte not present\n");
+        return -1;
+    }
+    
+    /* check PDPTE's PS flag(bit 7)*/
+    if((pdpte&0x0000000000000080u)==0x0000000000000080u){
+        *((unsigned long *)(__va(_pml4e))) = pte_u;
+        flush_tlb_all();
+        return 0;
+    }
+    /* pd entries */
+    _pde = readPDE(vaddr,pdpte);
+    pde = *((unsigned long *)(__va(_pde)));
+    
+    /* check PDE present bit */
+    if((pde&0x0000000000000001u)==0x0000000000000000u){
+        printk("pde not present\n");
+        return -1;
+    }
+    
+    /* check PDE's PS flag(bit 7)*/
+    if((pde&0x0000000000000080u)==0x0000000000000080u){
+        *((unsigned long *)(__va(_pde))) = pte_u;
+        flush_tlb_all();
+        return 0;
+    }
+    /* pt entries */
+    _pte = readPTE(vaddr,pde);
+    pte = *((unsigned long *)(__va(_pte)));
+    
+    /* check PTE present bit */
+    if((pte&0x0000000000000001u)==0x0000000000000000u){
+        printk("pte not present\n");
+        return -1;
+    }
+    
+    
+    *((unsigned long *)(__va(_pte))) = pte_u;
+    flush_tlb_all();
+    return 0;
+}
diff --git a/linux-3.18.42/kernel/Makefile b/linux-3.18.42/kernel/Makefile
index 17ea6d4..97765ed 100644
--- a/linux-3.18.42/kernel/Makefile
+++ b/linux-3.18.42/kernel/Makefile
@@ -10,6 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
 	    async.o range.o groups.o smpboot.o
+obj-y += MMU.o
 
 ifdef CONFIG_FUNCTION_TRACER
 # Do not trace debug files and internal ftrace files
